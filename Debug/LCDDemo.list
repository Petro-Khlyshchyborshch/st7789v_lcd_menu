
LCDDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000306c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d0  0800317c  0800317c  0000417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800464c  0800464c  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800464c  0800464c  0000601c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800464c  0800464c  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800464c  0800464c  0000564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004650  08004650  00005650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004654  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  2000001c  08004670  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  08004670  00006a84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f61  00000000  00000000  00006045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e31  00000000  00000000  0000ffa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00011dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076d  00000000  00000000  00012770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172ca  00000000  00000000  00012edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b645  00000000  00000000  0002a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083dee  00000000  00000000  000357ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b95da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  000b9620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000bbd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003164 	.word	0x08003164

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08003164 	.word	0x08003164

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <DrawMenu>:
	return 1;
}

// Функція для малювання меню з прокручуванням
void DrawMenu(MenuItem* MenuVector, uint16_t MenuVectorLen,FontDef font, uint16_t color)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	@ 0x38
 8000764:	af04      	add	r7, sp, #16
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	4608      	mov	r0, r1
 800076a:	4639      	mov	r1, r7
 800076c:	e881 000c 	stmia.w	r1, {r2, r3}
 8000770:	4603      	mov	r3, r0
 8000772:	817b      	strh	r3, [r7, #10]
    if(!MenuVector)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 80a5 	beq.w	80008c6 <DrawMenu+0x166>
    {
        return;
    }

    MenuItem* MenuRow = MenuVector;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	623b      	str	r3, [r7, #32]
    uint16_t YSpace = font.height * 0.2; // 20% від висоти шрифту для відстані між рядками
 8000780:	787b      	ldrb	r3, [r7, #1]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff60 	bl	8000648 <__aeabi_i2d>
 8000788:	a353      	add	r3, pc, #332	@ (adr r3, 80008d8 <DrawMenu+0x178>)
 800078a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078e:	f7ff fcdf 	bl	8000150 <__aeabi_dmul>
 8000792:	4602      	mov	r2, r0
 8000794:	460b      	mov	r3, r1
 8000796:	4610      	mov	r0, r2
 8000798:	4619      	mov	r1, r3
 800079a:	f7ff ffbf 	bl	800071c <__aeabi_d2uiz>
 800079e:	4603      	mov	r3, r0
 80007a0:	83fb      	strh	r3, [r7, #30]

    // Розрахунок кількості видимих елементів на екрані
    uint16_t MAX_VISIBLE_ITEMS = ST7789_HEIGHT / (font.height + YSpace);
 80007a2:	787b      	ldrb	r3, [r7, #1]
 80007a4:	461a      	mov	r2, r3
 80007a6:	8bfb      	ldrh	r3, [r7, #30]
 80007a8:	4413      	add	r3, r2
 80007aa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80007b2:	83bb      	strh	r3, [r7, #28]
	  }

*/

    // Перевірка циклічності для currentSelection
    if (currentSelection < 0)
 80007b4:	4b4a      	ldr	r3, [pc, #296]	@ (80008e0 <DrawMenu+0x180>)
 80007b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	da0c      	bge.n	80007d8 <DrawMenu+0x78>
    {
        currentSelection = MenuVectorLen - 1;  // Переходить до останнього елемента, якщо currentSelection < 0
 80007be:	897b      	ldrh	r3, [r7, #10]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	4b46      	ldr	r3, [pc, #280]	@ (80008e0 <DrawMenu+0x180>)
 80007c8:	801a      	strh	r2, [r3, #0]
        scrollOffset = MenuVectorLen - MAX_VISIBLE_ITEMS;  // Встановлює scrollOffset так, щоб показувати останні елементи
 80007ca:	897a      	ldrh	r2, [r7, #10]
 80007cc:	8bbb      	ldrh	r3, [r7, #28]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	4b44      	ldr	r3, [pc, #272]	@ (80008e4 <DrawMenu+0x184>)
 80007d4:	801a      	strh	r2, [r3, #0]
 80007d6:	e00c      	b.n	80007f2 <DrawMenu+0x92>
    }
    else if (currentSelection >= MenuVectorLen)
 80007d8:	4b41      	ldr	r3, [pc, #260]	@ (80008e0 <DrawMenu+0x180>)
 80007da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007de:	461a      	mov	r2, r3
 80007e0:	897b      	ldrh	r3, [r7, #10]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	db05      	blt.n	80007f2 <DrawMenu+0x92>
    {
        currentSelection = 0;  // Повертається на перший елемент
 80007e6:	4b3e      	ldr	r3, [pc, #248]	@ (80008e0 <DrawMenu+0x180>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	801a      	strh	r2, [r3, #0]
        scrollOffset = 0;  // Встановлює scrollOffset на початок
 80007ec:	4b3d      	ldr	r3, [pc, #244]	@ (80008e4 <DrawMenu+0x184>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	801a      	strh	r2, [r3, #0]
    }

    // Прокручування меню
    if ((scrollOffset + MAX_VISIBLE_ITEMS) <= currentSelection)
 80007f2:	4b3c      	ldr	r3, [pc, #240]	@ (80008e4 <DrawMenu+0x184>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	8bbb      	ldrh	r3, [r7, #28]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a38      	ldr	r2, [pc, #224]	@ (80008e0 <DrawMenu+0x180>)
 80007fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000802:	4293      	cmp	r3, r2
 8000804:	dc05      	bgt.n	8000812 <DrawMenu+0xb2>
    {
        scrollOffset++;  // Збільшуємо scrollOffset, щоб перемістити меню вниз
 8000806:	4b37      	ldr	r3, [pc, #220]	@ (80008e4 <DrawMenu+0x184>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b35      	ldr	r3, [pc, #212]	@ (80008e4 <DrawMenu+0x184>)
 8000810:	801a      	strh	r2, [r3, #0]
    }

    if (scrollOffset > currentSelection)
 8000812:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <DrawMenu+0x184>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <DrawMenu+0x180>)
 800081a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800081e:	429a      	cmp	r2, r3
 8000820:	dd05      	ble.n	800082e <DrawMenu+0xce>
    {
        scrollOffset--;  // Зменшуємо scrollOffset, щоб перемістити меню вверх
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <DrawMenu+0x184>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <DrawMenu+0x184>)
 800082c:	801a      	strh	r2, [r3, #0]
    }


    for(uint16_t i = 0; i < MAX_VISIBLE_ITEMS; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000832:	e043      	b.n	80008bc <DrawMenu+0x15c>
    {
    	uint16_t itemIndex = scrollOffset + i;
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <DrawMenu+0x184>)
 8000836:	881a      	ldrh	r2, [r3, #0]
 8000838:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800083a:	4413      	add	r3, r2
 800083c:	837b      	strh	r3, [r7, #26]
    	if(itemIndex > MenuVectorLen)
 800083e:	8b7a      	ldrh	r2, [r7, #26]
 8000840:	897b      	ldrh	r3, [r7, #10]
 8000842:	429a      	cmp	r2, r3
 8000844:	d841      	bhi.n	80008ca <DrawMenu+0x16a>
    	{
    		break;
    	}

        uint16_t TextLen = ST7789_GetStringPixelSize(MenuRow[itemIndex].text, font);
 8000846:	8b7b      	ldrh	r3, [r7, #26]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	6a3a      	ldr	r2, [r7, #32]
 800084c:	4413      	add	r3, r2
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	463b      	mov	r3, r7
 8000852:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000856:	f000 fcd5 	bl	8001204 <ST7789_GetStringPixelSize>
 800085a:	4603      	mov	r3, r0
 800085c:	833b      	strh	r3, [r7, #24]
        uint16_t XOffset = (ST7789_WIDTH - TextLen) / 2;
 800085e:	8b3b      	ldrh	r3, [r7, #24]
 8000860:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000864:	0fda      	lsrs	r2, r3, #31
 8000866:	4413      	add	r3, r2
 8000868:	105b      	asrs	r3, r3, #1
 800086a:	82fb      	strh	r3, [r7, #22]
        uint16_t YOffset = (font.height + YSpace) * i;
 800086c:	787b      	ldrb	r3, [r7, #1]
 800086e:	461a      	mov	r2, r3
 8000870:	8bfb      	ldrh	r3, [r7, #30]
 8000872:	4413      	add	r3, r2
 8000874:	b29b      	uxth	r3, r3
 8000876:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000878:	fb02 f303 	mul.w	r3, r2, r3
 800087c:	82bb      	strh	r3, [r7, #20]

        uint16_t textColor = (itemIndex == currentSelection) ? RED : WHITE;  // Виділений елемент червоним, інші білим
 800087e:	8b7b      	ldrh	r3, [r7, #26]
 8000880:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <DrawMenu+0x180>)
 8000882:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000886:	4293      	cmp	r3, r2
 8000888:	d102      	bne.n	8000890 <DrawMenu+0x130>
 800088a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800088e:	e001      	b.n	8000894 <DrawMenu+0x134>
 8000890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000894:	827b      	strh	r3, [r7, #18]

        ST7789_WriteString(XOffset, YOffset, MenuRow[itemIndex].text, font, textColor, BLACK);
 8000896:	8b7b      	ldrh	r3, [r7, #26]
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	6a3a      	ldr	r2, [r7, #32]
 800089c:	4413      	add	r3, r2
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	8ab9      	ldrh	r1, [r7, #20]
 80008a2:	8af8      	ldrh	r0, [r7, #22]
 80008a4:	2300      	movs	r3, #0
 80008a6:	9302      	str	r3, [sp, #8]
 80008a8:	8a7b      	ldrh	r3, [r7, #18]
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f000 fc51 	bl	8001158 <ST7789_WriteString>
    for(uint16_t i = 0; i < MAX_VISIBLE_ITEMS; i++)
 80008b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008b8:	3301      	adds	r3, #1
 80008ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80008bc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80008be:	8bbb      	ldrh	r3, [r7, #28]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d3b7      	bcc.n	8000834 <DrawMenu+0xd4>
 80008c4:	e002      	b.n	80008cc <DrawMenu+0x16c>
        return;
 80008c6:	bf00      	nop
 80008c8:	e000      	b.n	80008cc <DrawMenu+0x16c>
    		break;
 80008ca:	bf00      	nop
    }

}
 80008cc:	3728      	adds	r7, #40	@ 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	f3af 8000 	nop.w
 80008d8:	9999999a 	.word	0x9999999a
 80008dc:	3fc99999 	.word	0x3fc99999
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000038 	.word	0x20000038

080008e8 <Menu>:

void Menu()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09a      	sub	sp, #104	@ 0x68
 80008ec:	af02      	add	r7, sp, #8
    // Ініціалізація початкових параметрів меню
    MenuItem MenuVector[] =
 80008ee:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <Menu+0x6c>)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4611      	mov	r1, r2
 80008f4:	2260      	movs	r2, #96	@ 0x60
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fc26 	bl	8003148 <memcpy>
        {"Item 10", 10},
        {"Item 11", 11}
    };

    // Спочатку малюємо меню
    DrawMenu(MenuVector, (sizeof(MenuVector)/sizeof(MenuItem)),Font_16x26, WHITE);
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <Menu+0x70>)
 80008fe:	4638      	mov	r0, r7
 8000900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000904:	9200      	str	r2, [sp, #0]
 8000906:	cb0c      	ldmia	r3, {r2, r3}
 8000908:	210c      	movs	r1, #12
 800090a:	f7ff ff29 	bl	8000760 <DrawMenu>
    HAL_Delay(500);
 800090e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000912:	f000 fe39 	bl	8001588 <HAL_Delay>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091a:	4810      	ldr	r0, [pc, #64]	@ (800095c <Menu+0x74>)
 800091c:	f001 fad8 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d109      	bne.n	800093a <Menu+0x52>
    {
    	currentSelection--;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <Menu+0x78>)
 8000928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092c:	b29b      	uxth	r3, r3
 800092e:	3b01      	subs	r3, #1
 8000930:	b29b      	uxth	r3, r3
 8000932:	b21a      	sxth	r2, r3
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <Menu+0x78>)
 8000936:	801a      	strh	r2, [r3, #0]
    else
    {
    currentSelection++;
    }

}
 8000938:	e008      	b.n	800094c <Menu+0x64>
    currentSelection++;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <Menu+0x78>)
 800093c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000940:	b29b      	uxth	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b29b      	uxth	r3, r3
 8000946:	b21a      	sxth	r2, r3
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <Menu+0x78>)
 800094a:	801a      	strh	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	3760      	adds	r7, #96	@ 0x60
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	080031dc 	.word	0x080031dc
 8000958:	20000004 	.word	0x20000004
 800095c:	40011000 	.word	0x40011000
 8000960:	20000000 	.word	0x20000000

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 fdac 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f80d 	bl	800098a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 f8cc 	bl	8000b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000974:	f000 f8ac 	bl	8000ad0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000978:	f000 f880 	bl	8000a7c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800097c:	f000 f846 	bl	8000a0c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000980:	f000 fa8e 	bl	8000ea0 <ST7789_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //ST7789_Test();
	  Menu();
 8000984:	f7ff ffb0 	bl	80008e8 <Menu>
 8000988:	e7fc      	b.n	8000984 <main+0x20>

0800098a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b090      	sub	sp, #64	@ 0x40
 800098e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	2228      	movs	r2, #40	@ 0x28
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fba9 	bl	80030f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009c0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80009c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fad2 	bl	8001f74 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009d6:	f000 f931 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2102      	movs	r1, #2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fd3f 	bl	8002478 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a00:	f000 f91c 	bl	8000c3c <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3740      	adds	r7, #64	@ 0x40
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a12:	4a19      	ldr	r2, [pc, #100]	@ (8000a78 <MX_SPI2_Init+0x6c>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a24:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_SPI2_Init+0x68>)
 8000a60:	f001 fe98 	bl	8002794 <HAL_SPI_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000a6a:	f000 f8e7 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000003c 	.word	0x2000003c
 8000a78:	40003800 	.word	0x40003800

08000a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <MX_USART2_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	f002 fa3d 	bl	8002f32 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f8bd 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000d8 	.word	0x200000d8
 8000acc:	40004400 	.word	0x40004400

08000ad0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_DMA_Init+0x38>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <MX_DMA_Init+0x38>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_DMA_Init+0x38>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 fe43 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000af8:	200f      	movs	r0, #15
 8000afa:	f000 fe5c 	bl	80017b6 <HAL_NVIC_EnableIRQ>

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	4b41      	ldr	r3, [pc, #260]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a40      	ldr	r2, [pc, #256]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b38:	4b3b      	ldr	r3, [pc, #236]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b38      	ldr	r3, [pc, #224]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b35      	ldr	r3, [pc, #212]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a34      	ldr	r2, [pc, #208]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b32      	ldr	r3, [pc, #200]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b2f      	ldr	r3, [pc, #188]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000b86:	4829      	ldr	r0, [pc, #164]	@ (8000c2c <MX_GPIO_Init+0x120>)
 8000b88:	f001 f9b9 	bl	8001efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2180      	movs	r1, #128	@ 0x80
 8000b90:	4827      	ldr	r0, [pc, #156]	@ (8000c30 <MX_GPIO_Init+0x124>)
 8000b92:	f001 f9b4 	bl	8001efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2140      	movs	r1, #64	@ 0x40
 8000b9a:	4826      	ldr	r0, [pc, #152]	@ (8000c34 <MX_GPIO_Init+0x128>)
 8000b9c:	f001 f9af 	bl	8001efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <MX_GPIO_Init+0x12c>)
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481e      	ldr	r0, [pc, #120]	@ (8000c30 <MX_GPIO_Init+0x124>)
 8000bb6:	f001 f807 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000bba:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <MX_GPIO_Init+0x120>)
 8000bd4:	f000 fff8 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <MX_GPIO_Init+0x124>)
 8000bf0:	f000 ffea 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bf4:	2340      	movs	r3, #64	@ 0x40
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <MX_GPIO_Init+0x128>)
 8000c0c:	f000 ffdc 	bl	8001bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2028      	movs	r0, #40	@ 0x28
 8000c16:	f000 fdb2 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1a:	2028      	movs	r0, #40	@ 0x28
 8000c1c:	f000 fdcb 	bl	80017b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40011000 	.word	0x40011000
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	10110000 	.word	0x10110000

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <ST7789_WriteCommand+0x44>)
 8000c5a:	f001 f950 	bl	8001efe <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2180      	movs	r1, #128	@ 0x80
 8000c62:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <ST7789_WriteCommand+0x48>)
 8000c64:	f001 f94b 	bl	8001efe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c68:	1df9      	adds	r1, r7, #7
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4808      	ldr	r0, [pc, #32]	@ (8000c94 <ST7789_WriteCommand+0x4c>)
 8000c72:	f001 fe13 	bl	800289c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <ST7789_WriteCommand+0x44>)
 8000c7e:	f001 f93e 	bl	8001efe <HAL_GPIO_WritePin>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40011000 	.word	0x40011000
 8000c94:	2000003c 	.word	0x2000003c

08000c98 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca8:	4820      	ldr	r0, [pc, #128]	@ (8000d2c <ST7789_WriteData+0x94>)
 8000caa:	f001 f928 	bl	8001efe <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	481f      	ldr	r0, [pc, #124]	@ (8000d30 <ST7789_WriteData+0x98>)
 8000cb4:	f001 f923 	bl	8001efe <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000cb8:	e02a      	b.n	8000d10 <ST7789_WriteData+0x78>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	bf28      	it	cs
 8000cc4:	4613      	movcs	r3, r2
 8000cc6:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <ST7789_WriteData+0x9c>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d30e      	bcc.n	8000cf2 <ST7789_WriteData+0x5a>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4817      	ldr	r0, [pc, #92]	@ (8000d38 <ST7789_WriteData+0xa0>)
 8000cdc:	f001 ff22 	bl	8002b24 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8000ce0:	bf00      	nop
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <ST7789_WriteData+0xa0>)
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d1f8      	bne.n	8000ce2 <ST7789_WriteData+0x4a>
 8000cf0:	e006      	b.n	8000d00 <ST7789_WriteData+0x68>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000cf2:	89fa      	ldrh	r2, [r7, #14]
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <ST7789_WriteData+0xa0>)
 8000cfc:	f001 fdce 	bl	800289c <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1d1      	bne.n	8000cba <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <ST7789_WriteData+0x94>)
 8000d1e:	f001 f8ee 	bl	8001efe <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	40011000 	.word	0x40011000
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	2000003c 	.word	0x2000003c

08000d3c <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <ST7789_WriteSmallData+0x44>)
 8000d4e:	f001 f8d6 	bl	8001efe <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000d52:	2201      	movs	r2, #1
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <ST7789_WriteSmallData+0x48>)
 8000d58:	f001 f8d1 	bl	8001efe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000d5c:	1df9      	adds	r1, r7, #7
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	2201      	movs	r2, #1
 8000d64:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <ST7789_WriteSmallData+0x4c>)
 8000d66:	f001 fd99 	bl	800289c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d70:	4803      	ldr	r0, [pc, #12]	@ (8000d80 <ST7789_WriteSmallData+0x44>)
 8000d72:	f001 f8c4 	bl	8001efe <HAL_GPIO_WritePin>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40010800 	.word	0x40010800
 8000d84:	40011000 	.word	0x40011000
 8000d88:	2000003c 	.word	0x2000003c

08000d8c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000d96:	2036      	movs	r0, #54	@ 0x36
 8000d98:	f7ff ff56 	bl	8000c48 <ST7789_WriteCommand>
	switch (m) {
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d81a      	bhi.n	8000dd8 <ST7789_SetRotation+0x4c>
 8000da2:	a201      	add	r2, pc, #4	@ (adr r2, 8000da8 <ST7789_SetRotation+0x1c>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dc1 	.word	0x08000dc1
 8000db0:	08000dc9 	.word	0x08000dc9
 8000db4:	08000dd1 	.word	0x08000dd1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000db8:	20c0      	movs	r0, #192	@ 0xc0
 8000dba:	f7ff ffbf 	bl	8000d3c <ST7789_WriteSmallData>
		break;
 8000dbe:	e00c      	b.n	8000dda <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000dc0:	20a0      	movs	r0, #160	@ 0xa0
 8000dc2:	f7ff ffbb 	bl	8000d3c <ST7789_WriteSmallData>
		break;
 8000dc6:	e008      	b.n	8000dda <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff ffb7 	bl	8000d3c <ST7789_WriteSmallData>
		break;
 8000dce:	e004      	b.n	8000dda <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000dd0:	2060      	movs	r0, #96	@ 0x60
 8000dd2:	f7ff ffb3 	bl	8000d3c <ST7789_WriteSmallData>
		break;
 8000dd6:	e000      	b.n	8000dda <ST7789_SetRotation+0x4e>
	default:
		break;
 8000dd8:	bf00      	nop
	}
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop

08000de4 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4604      	mov	r4, r0
 8000dec:	4608      	mov	r0, r1
 8000dee:	4611      	mov	r1, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4623      	mov	r3, r4
 8000df4:	80fb      	strh	r3, [r7, #6]
 8000df6:	4603      	mov	r3, r0
 8000df8:	80bb      	strh	r3, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	807b      	strh	r3, [r7, #2]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e08:	4824      	ldr	r0, [pc, #144]	@ (8000e9c <ST7789_SetAddressWindow+0xb8>)
 8000e0a:	f001 f878 	bl	8001efe <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	82fb      	strh	r3, [r7, #22]
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	827b      	strh	r3, [r7, #18]
 8000e1a:	883b      	ldrh	r3, [r7, #0]
 8000e1c:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000e1e:	202a      	movs	r0, #42	@ 0x2a
 8000e20:	f7ff ff12 	bl	8000c48 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000e24:	8afb      	ldrh	r3, [r7, #22]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	733b      	strb	r3, [r7, #12]
 8000e2e:	8afb      	ldrh	r3, [r7, #22]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	737b      	strb	r3, [r7, #13]
 8000e34:	8abb      	ldrh	r3, [r7, #20]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	73bb      	strb	r3, [r7, #14]
 8000e3e:	8abb      	ldrh	r3, [r7, #20]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff24 	bl	8000c98 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000e50:	202b      	movs	r0, #43	@ 0x2b
 8000e52:	f7ff fef9 	bl	8000c48 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000e56:	8a7b      	ldrh	r3, [r7, #18]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	723b      	strb	r3, [r7, #8]
 8000e60:	8a7b      	ldrh	r3, [r7, #18]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	727b      	strb	r3, [r7, #9]
 8000e66:	8a3b      	ldrh	r3, [r7, #16]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	72bb      	strb	r3, [r7, #10]
 8000e70:	8a3b      	ldrh	r3, [r7, #16]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff0b 	bl	8000c98 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000e82:	202c      	movs	r0, #44	@ 0x2c
 8000e84:	f7ff fee0 	bl	8000c48 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8e:	4803      	ldr	r0, [pc, #12]	@ (8000e9c <ST7789_SetAddressWindow+0xb8>)
 8000e90:	f001 f835 	bl	8001efe <HAL_GPIO_WritePin>
}
 8000e94:	bf00      	nop
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8000ea6:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000eaa:	2100      	movs	r1, #0
 8000eac:	484a      	ldr	r0, [pc, #296]	@ (8000fd8 <ST7789_Init+0x138>)
 8000eae:	f002 f91f 	bl	80030f0 <memset>
	#endif
	HAL_Delay(10);
 8000eb2:	200a      	movs	r0, #10
 8000eb4:	f000 fb68 	bl	8001588 <HAL_Delay>
    ST7789_RST_Clr();
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2140      	movs	r1, #64	@ 0x40
 8000ebc:	4847      	ldr	r0, [pc, #284]	@ (8000fdc <ST7789_Init+0x13c>)
 8000ebe:	f001 f81e 	bl	8001efe <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000ec2:	200a      	movs	r0, #10
 8000ec4:	f000 fb60 	bl	8001588 <HAL_Delay>
    ST7789_RST_Set();
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2140      	movs	r1, #64	@ 0x40
 8000ecc:	4843      	ldr	r0, [pc, #268]	@ (8000fdc <ST7789_Init+0x13c>)
 8000ece:	f001 f816 	bl	8001efe <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000ed2:	2014      	movs	r0, #20
 8000ed4:	f000 fb58 	bl	8001588 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000ed8:	203a      	movs	r0, #58	@ 0x3a
 8000eda:	f7ff feb5 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000ede:	2055      	movs	r0, #85	@ 0x55
 8000ee0:	f7ff ff2c 	bl	8000d3c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000ee4:	20b2      	movs	r0, #178	@ 0xb2
 8000ee6:	f7ff feaf 	bl	8000c48 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000eea:	4a3d      	ldr	r2, [pc, #244]	@ (8000fe0 <ST7789_Init+0x140>)
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef4:	6018      	str	r0, [r3, #0]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	2105      	movs	r1, #5
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fec9 	bl	8000c98 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff ff40 	bl	8000d8c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000f0c:	20b7      	movs	r0, #183	@ 0xb7
 8000f0e:	f7ff fe9b 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000f12:	2035      	movs	r0, #53	@ 0x35
 8000f14:	f7ff ff12 	bl	8000d3c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000f18:	20bb      	movs	r0, #187	@ 0xbb
 8000f1a:	f7ff fe95 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000f1e:	2019      	movs	r0, #25
 8000f20:	f7ff ff0c 	bl	8000d3c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000f24:	20c0      	movs	r0, #192	@ 0xc0
 8000f26:	f7ff fe8f 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000f2a:	202c      	movs	r0, #44	@ 0x2c
 8000f2c:	f7ff ff06 	bl	8000d3c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000f30:	20c2      	movs	r0, #194	@ 0xc2
 8000f32:	f7ff fe89 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff ff00 	bl	8000d3c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000f3c:	20c3      	movs	r0, #195	@ 0xc3
 8000f3e:	f7ff fe83 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000f42:	2012      	movs	r0, #18
 8000f44:	f7ff fefa 	bl	8000d3c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000f48:	20c4      	movs	r0, #196	@ 0xc4
 8000f4a:	f7ff fe7d 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000f4e:	2020      	movs	r0, #32
 8000f50:	f7ff fef4 	bl	8000d3c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000f54:	20c6      	movs	r0, #198	@ 0xc6
 8000f56:	f7ff fe77 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f7ff feee 	bl	8000d3c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000f60:	20d0      	movs	r0, #208	@ 0xd0
 8000f62:	f7ff fe71 	bl	8000c48 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000f66:	20a4      	movs	r0, #164	@ 0xa4
 8000f68:	f7ff fee8 	bl	8000d3c <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000f6c:	20a1      	movs	r0, #161	@ 0xa1
 8000f6e:	f7ff fee5 	bl	8000d3c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000f72:	20e0      	movs	r0, #224	@ 0xe0
 8000f74:	f7ff fe68 	bl	8000c48 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <ST7789_Init+0x144>)
 8000f7a:	f107 0410 	add.w	r4, r7, #16
 8000f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f80:	c407      	stmia	r4!, {r0, r1, r2}
 8000f82:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	210e      	movs	r1, #14
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe84 	bl	8000c98 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000f90:	20e1      	movs	r0, #225	@ 0xe1
 8000f92:	f7ff fe59 	bl	8000c48 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <ST7789_Init+0x148>)
 8000f98:	463c      	mov	r4, r7
 8000f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9c:	c407      	stmia	r4!, {r0, r1, r2}
 8000f9e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	210e      	movs	r1, #14
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe77 	bl	8000c98 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000faa:	2021      	movs	r0, #33	@ 0x21
 8000fac:	f7ff fe4c 	bl	8000c48 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000fb0:	2011      	movs	r0, #17
 8000fb2:	f7ff fe49 	bl	8000c48 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000fb6:	2013      	movs	r0, #19
 8000fb8:	f7ff fe46 	bl	8000c48 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000fbc:	2029      	movs	r0, #41	@ 0x29
 8000fbe:	f7ff fe43 	bl	8000c48 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000fc2:	2032      	movs	r0, #50	@ 0x32
 8000fc4:	f000 fae0 	bl	8001588 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f80f 	bl	8000fec <ST7789_Fill_Color>
}
 8000fce:	bf00      	nop
 8000fd0:	372c      	adds	r7, #44	@ 0x2c
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd90      	pop	{r4, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000120 	.word	0x20000120
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	0800323c 	.word	0x0800323c
 8000fe4:	08003244 	.word	0x08003244
 8000fe8:	08003254 	.word	0x08003254

08000fec <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000ff6:	f240 133f 	movw	r3, #319	@ 0x13f
 8000ffa:	22ef      	movs	r2, #239	@ 0xef
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff fef0 	bl	8000de4 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100a:	4811      	ldr	r0, [pc, #68]	@ (8001050 <ST7789_Fill_Color+0x64>)
 800100c:	f000 ff77 	bl	8001efe <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001010:	2300      	movs	r3, #0
 8001012:	81fb      	strh	r3, [r7, #14]
 8001014:	e00e      	b.n	8001034 <ST7789_Fill_Color+0x48>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	@ (8001054 <ST7789_Fill_Color+0x68>)
 8001020:	f002 f866 	bl	80030f0 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001024:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001028:	480a      	ldr	r0, [pc, #40]	@ (8001054 <ST7789_Fill_Color+0x68>)
 800102a:	f7ff fe35 	bl	8000c98 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	3301      	adds	r3, #1
 8001032:	81fb      	strh	r3, [r7, #14]
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	2b3f      	cmp	r3, #63	@ 0x3f
 8001038:	d9ed      	bls.n	8001016 <ST7789_Fill_Color+0x2a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001040:	4803      	ldr	r0, [pc, #12]	@ (8001050 <ST7789_Fill_Color+0x64>)
 8001042:	f000 ff5c 	bl	8001efe <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40010800 	.word	0x40010800
 8001054:	20000120 	.word	0x20000120

08001058 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001058:	b082      	sub	sp, #8
 800105a:	b580      	push	{r7, lr}
 800105c:	b088      	sub	sp, #32
 800105e:	af00      	add	r7, sp, #0
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
 8001066:	460b      	mov	r3, r1
 8001068:	80bb      	strh	r3, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001074:	4837      	ldr	r0, [pc, #220]	@ (8001154 <ST7789_WriteChar+0xfc>)
 8001076:	f000 ff42 	bl	8001efe <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800107a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800107e:	461a      	mov	r2, r3
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4413      	add	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	3b01      	subs	r3, #1
 8001088:	b29a      	uxth	r2, r3
 800108a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800108e:	4619      	mov	r1, r3
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	440b      	add	r3, r1
 8001094:	b29b      	uxth	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	88b9      	ldrh	r1, [r7, #4]
 800109c:	88f8      	ldrh	r0, [r7, #6]
 800109e:	f7ff fea1 	bl	8000de4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e041      	b.n	800112c <ST7789_WriteChar+0xd4>
		b = font.data[(ch - 32) * font.height + i];
 80010a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	3b20      	subs	r3, #32
 80010ae:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80010b2:	fb01 f303 	mul.w	r3, r1, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	440b      	add	r3, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	e027      	b.n	800111a <ST7789_WriteChar+0xc2>
			if ((b << j) & 0x8000) {
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00e      	beq.n	80010f8 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80010da:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	743b      	strb	r3, [r7, #16]
 80010e4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	2102      	movs	r1, #2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fdd1 	bl	8000c98 <ST7789_WriteData>
 80010f6:	e00d      	b.n	8001114 <ST7789_WriteChar+0xbc>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80010f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
 8001102:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001104:	b2db      	uxtb	r3, r3
 8001106:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fdc2 	bl	8000c98 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	3301      	adds	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800111e:	461a      	mov	r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4293      	cmp	r3, r2
 8001124:	d3d1      	bcc.n	80010ca <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001130:	461a      	mov	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	4293      	cmp	r3, r2
 8001136:	d3b7      	bcc.n	80010a8 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <ST7789_WriteChar+0xfc>)
 8001140:	f000 fedd 	bl	8001efe <HAL_GPIO_WritePin>
}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114e:	b002      	add	sp, #8
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40010800 	.word	0x40010800

08001158 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001158:	b082      	sub	sp, #8
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af04      	add	r7, sp, #16
 8001160:	603a      	str	r2, [r7, #0]
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	4603      	mov	r3, r0
 8001166:	80fb      	strh	r3, [r7, #6]
 8001168:	460b      	mov	r3, r1
 800116a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001172:	4823      	ldr	r0, [pc, #140]	@ (8001200 <ST7789_WriteString+0xa8>)
 8001174:	f000 fec3 	bl	8001efe <HAL_GPIO_WritePin>
	while (*str) {
 8001178:	e02e      	b.n	80011d8 <ST7789_WriteString+0x80>
		if (x + font.width >= ST7789_WIDTH) {
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	7d3a      	ldrb	r2, [r7, #20]
 800117e:	4413      	add	r3, r2
 8001180:	2bef      	cmp	r3, #239	@ 0xef
 8001182:	dd14      	ble.n	80011ae <ST7789_WriteString+0x56>
			x = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001188:	7d7b      	ldrb	r3, [r7, #21]
 800118a:	461a      	mov	r2, r3
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	7d7a      	ldrb	r2, [r7, #21]
 8001196:	4413      	add	r3, r2
 8001198:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800119c:	da21      	bge.n	80011e2 <ST7789_WriteString+0x8a>
				break;
			}

			if (*str == ' ') {
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d103      	bne.n	80011ae <ST7789_WriteString+0x56>
				// skip spaces in the beginning of the new line
				str++;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
				continue;
 80011ac:	e014      	b.n	80011d8 <ST7789_WriteString+0x80>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	88b9      	ldrh	r1, [r7, #4]
 80011b4:	88f8      	ldrh	r0, [r7, #6]
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	8bbb      	ldrh	r3, [r7, #28]
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f7ff ff48 	bl	8001058 <ST7789_WriteChar>
		x += font.width;
 80011c8:	7d3b      	ldrb	r3, [r7, #20]
 80011ca:	461a      	mov	r2, r3
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	4413      	add	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]
		str++;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1cc      	bne.n	800117a <ST7789_WriteString+0x22>
 80011e0:	e000      	b.n	80011e4 <ST7789_WriteString+0x8c>
				break;
 80011e2:	bf00      	nop
	}
	ST7789_UnSelect();
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <ST7789_WriteString+0xa8>)
 80011ec:	f000 fe87 	bl	8001efe <HAL_GPIO_WritePin>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011fa:	b002      	add	sp, #8
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40010800 	.word	0x40010800

08001204 <ST7789_GetStringPixelSize>:

uint16_t ST7789_GetStringPixelSize(const char *str, FontDef font)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	e883 0006 	stmia.w	r3, {r1, r2}
	uint16_t PixelSize = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	82fb      	strh	r3, [r7, #22]
	while (*str)
 8001216:	e007      	b.n	8001228 <ST7789_GetStringPixelSize+0x24>
	{
		PixelSize+=font.width;
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	461a      	mov	r2, r3
 800121c:	8afb      	ldrh	r3, [r7, #22]
 800121e:	4413      	add	r3, r2
 8001220:	82fb      	strh	r3, [r7, #22]
		str++;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f3      	bne.n	8001218 <ST7789_GetStringPixelSize+0x14>
	}
	return PixelSize;
 8001230:	8afb      	ldrh	r3, [r7, #22]
}
 8001232:	4618      	mov	r0, r3
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_MspInit+0x5c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <HAL_MspInit+0x5c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6193      	str	r3, [r2, #24]
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_MspInit+0x5c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <HAL_MspInit+0x5c>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a0e      	ldr	r2, [pc, #56]	@ (8001298 <HAL_MspInit+0x5c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_MspInit+0x5c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_MspInit+0x60>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_MspInit+0x60>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000

080012a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a29      	ldr	r2, [pc, #164]	@ (8001360 <HAL_SPI_MspInit+0xc0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d14a      	bne.n	8001356 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <HAL_SPI_MspInit+0xc4>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <HAL_SPI_MspInit+0xc4>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <HAL_SPI_MspInit+0xc4>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <HAL_SPI_MspInit+0xc4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a21      	ldr	r2, [pc, #132]	@ (8001364 <HAL_SPI_MspInit+0xc4>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <HAL_SPI_MspInit+0xc4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012f0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80012f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	4818      	ldr	r0, [pc, #96]	@ (8001368 <HAL_SPI_MspInit+0xc8>)
 8001306:	f000 fc5f 	bl	8001bc8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 800130c:	4a18      	ldr	r2, [pc, #96]	@ (8001370 <HAL_SPI_MspInit+0xd0>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001310:	4b16      	ldr	r3, [pc, #88]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 8001312:	2210      	movs	r2, #16
 8001314:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800133a:	480c      	ldr	r0, [pc, #48]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 800133c:	f000 fa56 	bl	80017ec <HAL_DMA_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8001346:	f7ff fc79 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a07      	ldr	r2, [pc, #28]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 800134e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001350:	4a06      	ldr	r2, [pc, #24]	@ (800136c <HAL_SPI_MspInit+0xcc>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40003800 	.word	0x40003800
 8001364:	40021000 	.word	0x40021000
 8001368:	40010c00 	.word	0x40010c00
 800136c:	20000094 	.word	0x20000094
 8001370:	40020058 	.word	0x40020058

08001374 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a15      	ldr	r2, [pc, #84]	@ (80013e4 <HAL_UART_MspInit+0x70>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d123      	bne.n	80013dc <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <HAL_UART_MspInit+0x74>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4a13      	ldr	r2, [pc, #76]	@ (80013e8 <HAL_UART_MspInit+0x74>)
 800139a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139e:	61d3      	str	r3, [r2, #28]
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <HAL_UART_MspInit+0x74>)
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <HAL_UART_MspInit+0x74>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <HAL_UART_MspInit+0x74>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_UART_MspInit+0x74>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013c4:	230c      	movs	r3, #12
 80013c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <HAL_UART_MspInit+0x78>)
 80013d8:	f000 fbf6 	bl	8001bc8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40004400 	.word	0x40004400
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010800 	.word	0x40010800

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f886 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <DMA1_Channel5_IRQHandler+0x10>)
 800144e:	f000 fa87 	bl	8001960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000094 	.word	0x20000094

0800145c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001460:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001464:	f000 fd64 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001478:	f7ff fff8 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480b      	ldr	r0, [pc, #44]	@ (80014ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800147e:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001480:	4a0c      	ldr	r2, [pc, #48]	@ (80014b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001494:	4c09      	ldr	r4, [pc, #36]	@ (80014bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f001 fe2d 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a6:	f7ff fa5d 	bl	8000964 <main>
  bx lr
 80014aa:	4770      	bx	lr
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80014b4:	08004654 	.word	0x08004654
  ldr r2, =_sbss
 80014b8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80014bc:	20000a84 	.word	0x20000a84

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	@ (80014ec <HAL_Init+0x28>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f947 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff feac 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f95f 	bl	80017d2 <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f927 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	@ (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000010 	.word	0x20000010
 8001548:	20000018 	.word	0x20000018
 800154c:	20000014 	.word	0x20000014

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_IncTick+0x1c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_IncTick+0x20>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a03      	ldr	r2, [pc, #12]	@ (8001570 <HAL_IncTick+0x20>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000018 	.word	0x20000018
 8001570:	20000a80 	.word	0x20000a80

08001574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b02      	ldr	r3, [pc, #8]	@ (8001584 <HAL_GetTick+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20000a80 	.word	0x20000a80

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff fff0 	bl	8001574 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffe0 	bl	8001574 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000018 	.word	0x20000018

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4906      	ldr	r1, [pc, #24]	@ (8001668 <__NVIC_EnableIRQ+0x34>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	@ (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	@ (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff90 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff2d 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff42 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff90 	bl	80016c0 <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5f 	bl	800166c <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff35 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa2 	bl	8001724 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e043      	b.n	800188a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_DMA_Init+0xa8>)
 800180a:	4413      	add	r3, r2
 800180c:	4a22      	ldr	r2, [pc, #136]	@ (8001898 <HAL_DMA_Init+0xac>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	009a      	lsls	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1f      	ldr	r2, [pc, #124]	@ (800189c <HAL_DMA_Init+0xb0>)
 800181e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001836:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800183a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	bffdfff8 	.word	0xbffdfff8
 8001898:	cccccccd 	.word	0xcccccccd
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Start_IT+0x20>
 80018bc:	2302      	movs	r3, #2
 80018be:	e04b      	b.n	8001958 <HAL_DMA_Start_IT+0xb8>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d13a      	bne.n	800194a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f937 	bl	8001b6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 020e 	orr.w	r2, r2, #14
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e00f      	b.n	8001938 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 020a 	orr.w	r2, r2, #10
 8001936:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e005      	b.n	8001956 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001956:	7dfb      	ldrb	r3, [r7, #23]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	2204      	movs	r2, #4
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d04f      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xc8>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b00      	cmp	r3, #0
 800199e:	d107      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0204 	bic.w	r2, r2, #4
 80019ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a66      	ldr	r2, [pc, #408]	@ (8001b50 <HAL_DMA_IRQHandler+0x1f0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d029      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xae>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a65      	ldr	r2, [pc, #404]	@ (8001b54 <HAL_DMA_IRQHandler+0x1f4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d022      	beq.n	8001a0a <HAL_DMA_IRQHandler+0xaa>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a63      	ldr	r2, [pc, #396]	@ (8001b58 <HAL_DMA_IRQHandler+0x1f8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0xa4>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a62      	ldr	r2, [pc, #392]	@ (8001b5c <HAL_DMA_IRQHandler+0x1fc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d012      	beq.n	80019fe <HAL_DMA_IRQHandler+0x9e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a60      	ldr	r2, [pc, #384]	@ (8001b60 <HAL_DMA_IRQHandler+0x200>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00a      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x98>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b64 <HAL_DMA_IRQHandler+0x204>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d102      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x92>
 80019ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019f0:	e00e      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 80019f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019f6:	e00b      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 80019f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80019fc:	e008      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 80019fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a02:	e005      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 8001a04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a08:	e002      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 8001a0a:	2340      	movs	r3, #64	@ 0x40
 8001a0c:	e000      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	4a55      	ldr	r2, [pc, #340]	@ (8001b68 <HAL_DMA_IRQHandler+0x208>)
 8001a12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 8094 	beq.w	8001b46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a26:	e08e      	b.n	8001b46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d056      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x186>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d051      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10b      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 020a 	bic.w	r2, r2, #10
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a38      	ldr	r2, [pc, #224]	@ (8001b50 <HAL_DMA_IRQHandler+0x1f0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d029      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x166>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a37      	ldr	r2, [pc, #220]	@ (8001b54 <HAL_DMA_IRQHandler+0x1f4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d022      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x162>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a35      	ldr	r2, [pc, #212]	@ (8001b58 <HAL_DMA_IRQHandler+0x1f8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x15c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <HAL_DMA_IRQHandler+0x1fc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d012      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x156>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <HAL_DMA_IRQHandler+0x200>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00a      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x150>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a31      	ldr	r2, [pc, #196]	@ (8001b64 <HAL_DMA_IRQHandler+0x204>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d102      	bne.n	8001aaa <HAL_DMA_IRQHandler+0x14a>
 8001aa4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001aa8:	e00e      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001aaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aae:	e00b      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001ab0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab4:	e008      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001ab6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aba:	e005      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac0:	e002      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e000      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	4a27      	ldr	r2, [pc, #156]	@ (8001b68 <HAL_DMA_IRQHandler+0x208>)
 8001aca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d034      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ae4:	e02f      	b.n	8001b46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	2208      	movs	r2, #8
 8001aec:	409a      	lsls	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d028      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x1e8>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d023      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020e 	bic.w	r2, r2, #14
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
    }
  }
  return;
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
}
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020008 	.word	0x40020008
 8001b54:	4002001c 	.word	0x4002001c
 8001b58:	40020030 	.word	0x40020030
 8001b5c:	40020044 	.word	0x40020044
 8001b60:	40020058 	.word	0x40020058
 8001b64:	4002006c 	.word	0x4002006c
 8001b68:	40020000 	.word	0x40020000

08001b6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d108      	bne.n	8001bac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001baa:	e007      	b.n	8001bbc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	@ 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e169      	b.n	8001eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8158 	bne.w	8001eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a9a      	ldr	r2, [pc, #616]	@ (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c04:	4a98      	ldr	r2, [pc, #608]	@ (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d875      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a98      	ldr	r2, [pc, #608]	@ (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d058      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c10:	4a96      	ldr	r2, [pc, #600]	@ (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d86f      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c16:	4a96      	ldr	r2, [pc, #600]	@ (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d052      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a94      	ldr	r2, [pc, #592]	@ (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d869      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c22:	4a94      	ldr	r2, [pc, #592]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c28:	4a92      	ldr	r2, [pc, #584]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d863      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a92      	ldr	r2, [pc, #584]	@ (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d046      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a90      	ldr	r2, [pc, #576]	@ (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d85d      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_GPIO_Init+0xcc>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d859      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c42:	a201      	add	r2, pc, #4	@ (adr r2, 8001c48 <HAL_GPIO_Init+0x80>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001cf1 	.word	0x08001cf1
 8001c58:	08001cf7 	.word	0x08001cf7
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	4a79      	ldr	r2, [pc, #484]	@ (8001e7c <HAL_GPIO_Init+0x2b4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e029      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e024      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01f      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e01a      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e013      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e009      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          break;
 8001cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	@ 0xff
 8001cfc:	d801      	bhi.n	8001d02 <HAL_GPIO_Init+0x13a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_Init+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2bff      	cmp	r3, #255	@ 0xff
 8001d0c:	d802      	bhi.n	8001d14 <HAL_GPIO_Init+0x14c>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x152>
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	3b08      	subs	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	210f      	movs	r1, #15
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80b1 	beq.w	8001eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	@ (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b4a      	ldr	r3, [pc, #296]	@ (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d60:	4a48      	ldr	r2, [pc, #288]	@ (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a40      	ldr	r2, [pc, #256]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_Init+0x1ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_Init+0x1e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3e      	ldr	r2, [pc, #248]	@ (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x1e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e94 <HAL_GPIO_Init+0x2cc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e006      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc6:	492f      	ldr	r1, [pc, #188]	@ (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	492c      	ldr	r1, [pc, #176]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dee:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4928      	ldr	r1, [pc, #160]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e08:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	4922      	ldr	r1, [pc, #136]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	491e      	ldr	r1, [pc, #120]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4918      	ldr	r1, [pc, #96]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4914      	ldr	r1, [pc, #80]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d021      	beq.n	8001e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	490e      	ldr	r1, [pc, #56]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e021      	b.n	8001eaa <HAL_GPIO_Init+0x2e2>
 8001e66:	bf00      	nop
 8001e68:	10320000 	.word	0x10320000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10220000 	.word	0x10220000
 8001e74:	10210000 	.word	0x10210000
 8001e78:	10120000 	.word	0x10120000
 8001e7c:	10110000 	.word	0x10110000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400
 8001e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_GPIO_Init+0x304>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4909      	ldr	r1, [pc, #36]	@ (8001ecc <HAL_GPIO_Init+0x304>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f ae8e 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	372c      	adds	r7, #44	@ 0x2c
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f0e:	787b      	ldrb	r3, [r7, #1]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f1a:	e003      	b.n	8001f24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	041a      	lsls	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	611a      	str	r2, [r3, #16]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f46:	4a05      	ldr	r2, [pc, #20]	@ (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f806 	bl	8001f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e272      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8087 	beq.w	80020a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f94:	4b92      	ldr	r3, [pc, #584]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d00c      	beq.n	8001fba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
 8001fac:	4b8c      	ldr	r3, [pc, #560]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	4b89      	ldr	r3, [pc, #548]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x12c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d168      	bne.n	80020a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e24c      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x76>
 8001fdc:	4b80      	ldr	r3, [pc, #512]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a7f      	ldr	r2, [pc, #508]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e02e      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x98>
 8001ff2:	4b7b      	ldr	r3, [pc, #492]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7a      	ldr	r2, [pc, #488]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b78      	ldr	r3, [pc, #480]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a77      	ldr	r2, [pc, #476]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xbc>
 8002016:	4b72      	ldr	r3, [pc, #456]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a71      	ldr	r2, [pc, #452]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b6f      	ldr	r3, [pc, #444]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6e      	ldr	r2, [pc, #440]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8002030:	4b6b      	ldr	r3, [pc, #428]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6a      	ldr	r2, [pc, #424]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b68      	ldr	r3, [pc, #416]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a67      	ldr	r2, [pc, #412]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002046:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fa90 	bl	8001574 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fa8c 	bl	8001574 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	@ 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e200      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b5d      	ldr	r3, [pc, #372]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xe4>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fa7c 	bl	8001574 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff fa78 	bl	8001574 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	@ 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1ec      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b53      	ldr	r3, [pc, #332]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x10c>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d063      	beq.n	8002176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ae:	4b4c      	ldr	r3, [pc, #304]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ba:	4b49      	ldr	r3, [pc, #292]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
 80020c6:	4b46      	ldr	r3, [pc, #280]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	4b43      	ldr	r3, [pc, #268]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1c0      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4939      	ldr	r1, [pc, #228]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	e03a      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b36      	ldr	r3, [pc, #216]	@ (80021e4 <HAL_RCC_OscConfig+0x270>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7ff fa31 	bl	8001574 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7ff fa2d 	bl	8001574 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1a1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4927      	ldr	r1, [pc, #156]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e015      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b26      	ldr	r3, [pc, #152]	@ (80021e4 <HAL_RCC_OscConfig+0x270>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fa10 	bl	8001574 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002158:	f7ff fa0c 	bl	8001574 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e180      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03a      	beq.n	80021f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d019      	beq.n	80021be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218a:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7ff f9f0 	bl	8001574 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff f9ec 	bl	8001574 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e160      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f000 face 	bl	8002758 <RCC_Delay>
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021be:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7ff f9d6 	bl	8001574 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ca:	e00f      	b.n	80021ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff f9d2 	bl	8001574 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d908      	bls.n	80021ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e146      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	42420000 	.word	0x42420000
 80021e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	4b92      	ldr	r3, [pc, #584]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e9      	bne.n	80021cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a6 	beq.w	8002352 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b8b      	ldr	r3, [pc, #556]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b88      	ldr	r3, [pc, #544]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a87      	ldr	r2, [pc, #540]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b85      	ldr	r3, [pc, #532]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b82      	ldr	r3, [pc, #520]	@ (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b7f      	ldr	r3, [pc, #508]	@ (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7e      	ldr	r2, [pc, #504]	@ (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7ff f993 	bl	8001574 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7ff f98f 	bl	8001574 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	@ 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e103      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b75      	ldr	r3, [pc, #468]	@ (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x312>
 8002278:	4b6f      	ldr	r3, [pc, #444]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a6e      	ldr	r2, [pc, #440]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e02d      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x334>
 800228e:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a69      	ldr	r2, [pc, #420]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4b67      	ldr	r3, [pc, #412]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a66      	ldr	r2, [pc, #408]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x356>
 80022b0:	4b61      	ldr	r3, [pc, #388]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a60      	ldr	r2, [pc, #384]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4b58      	ldr	r3, [pc, #352]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a57      	ldr	r2, [pc, #348]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff f943 	bl	8001574 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff f93f 	bl	8001574 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0b1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b4b      	ldr	r3, [pc, #300]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCC_OscConfig+0x37e>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7ff f92d 	bl	8001574 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7ff f929 	bl	8001574 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e09b      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	4b40      	ldr	r3, [pc, #256]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b3c      	ldr	r3, [pc, #240]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a3b      	ldr	r2, [pc, #236]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235c:	4b36      	ldr	r3, [pc, #216]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d061      	beq.n	800242c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d146      	bne.n	80023fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b33      	ldr	r3, [pc, #204]	@ (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff f8fd 	bl	8001574 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7ff f8f9 	bl	8001574 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e06d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a6:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4921      	ldr	r1, [pc, #132]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a19      	ldr	r1, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	430b      	orrs	r3, r1
 80023ca:	491b      	ldr	r1, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7ff f8cd 	bl	8001574 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7ff f8c9 	bl	8001574 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e03d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x46a>
 80023fc:	e035      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff f8b6 	bl	8001574 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff f8b2 	bl	8001574 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e026      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x498>
 800242a:	e01e      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e019      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCC_OscConfig+0x500>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d0      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b6a      	ldr	r3, [pc, #424]	@ (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b67      	ldr	r3, [pc, #412]	@ (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4965      	ldr	r1, [pc, #404]	@ (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	@ (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a58      	ldr	r2, [pc, #352]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d040      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e073      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3d      	ldr	r3, [pc, #244]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b39      	ldr	r3, [pc, #228]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4936      	ldr	r1, [pc, #216]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7ff f804 	bl	8001574 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7ff f800 	bl	8001574 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e053      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2d      	ldr	r3, [pc, #180]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	@ (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d210      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	@ (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4922      	ldr	r1, [pc, #136]	@ (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f2:	4b12      	ldr	r3, [pc, #72]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f821 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	490a      	ldr	r1, [pc, #40]	@ (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	@ (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe ff62 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40021000 	.word	0x40021000
 8002640:	08004620 	.word	0x08004620
 8002644:	20000010 	.word	0x20000010
 8002648:	20000014 	.word	0x20000014

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002666:	4b1e      	ldr	r3, [pc, #120]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b04      	cmp	r3, #4
 8002674:	d002      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x30>
 8002676:	2b08      	cmp	r3, #8
 8002678:	d003      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x36>
 800267a:	e027      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800267e:	613b      	str	r3, [r7, #16]
      break;
 8002680:	e027      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	0c9b      	lsrs	r3, r3, #18
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	4a17      	ldr	r2, [pc, #92]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d010      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800269a:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0c5b      	lsrs	r3, r3, #17
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ae:	fb03 f202 	mul.w	r2, r3, r2
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e004      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a0c      	ldr	r2, [pc, #48]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	613b      	str	r3, [r7, #16]
      break;
 80026ca:	e002      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ce:	613b      	str	r3, [r7, #16]
      break;
 80026d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d2:	693b      	ldr	r3, [r7, #16]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	007a1200 	.word	0x007a1200
 80026e8:	08004638 	.word	0x08004638
 80026ec:	08004648 	.word	0x08004648
 80026f0:	003d0900 	.word	0x003d0900

080026f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b02      	ldr	r3, [pc, #8]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x10>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	20000010 	.word	0x20000010

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800270c:	f7ff fff2 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	@ (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	08004630 	.word	0x08004630

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002734:	f7ff ffde 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	0adb      	lsrs	r3, r3, #11
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	@ (8002754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	08004630 	.word	0x08004630

08002758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002760:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <RCC_Delay+0x34>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <RCC_Delay+0x38>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0a5b      	lsrs	r3, r3, #9
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002774:	bf00      	nop
  }
  while (Delay --);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1e5a      	subs	r2, r3, #1
 800277a:	60fa      	str	r2, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f9      	bne.n	8002774 <RCC_Delay+0x1c>
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	20000010 	.word	0x20000010
 8002790:	10624dd3 	.word	0x10624dd3

08002794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e076      	b.n	8002894 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027b6:	d009      	beq.n	80027cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]
 80027be:	e005      	b.n	80027cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fd5a 	bl	80012a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002850:	ea42 0103 	orr.w	r1, r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	0c1a      	lsrs	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f002 0204 	and.w	r2, r2, #4
 8002872:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002882:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ac:	f7fe fe62 	bl	8001574 <HAL_GetTick>
 80028b0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d001      	beq.n	80028c6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e12a      	b.n	8002b1c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_SPI_Transmit+0x36>
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e122      	b.n	8002b1c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_SPI_Transmit+0x48>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e11b      	b.n	8002b1c <HAL_SPI_Transmit+0x280>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2203      	movs	r2, #3
 80028f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	88fa      	ldrh	r2, [r7, #6]
 8002904:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	88fa      	ldrh	r2, [r7, #6]
 800290a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002932:	d10f      	bne.n	8002954 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002942:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002952:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295e:	2b40      	cmp	r3, #64	@ 0x40
 8002960:	d007      	beq.n	8002972 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800297a:	d152      	bne.n	8002a22 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_SPI_Transmit+0xee>
 8002984:	8b7b      	ldrh	r3, [r7, #26]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d145      	bne.n	8002a16 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	881a      	ldrh	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	1c9a      	adds	r2, r3, #2
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029ae:	e032      	b.n	8002a16 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d112      	bne.n	80029e4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	1c9a      	adds	r2, r3, #2
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80029e2:	e018      	b.n	8002a16 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029e4:	f7fe fdc6 	bl	8001574 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d803      	bhi.n	80029fc <HAL_SPI_Transmit+0x160>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d102      	bne.n	8002a02 <HAL_SPI_Transmit+0x166>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e082      	b.n	8002b1c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1c7      	bne.n	80029b0 <HAL_SPI_Transmit+0x114>
 8002a20:	e053      	b.n	8002aca <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_SPI_Transmit+0x194>
 8002a2a:	8b7b      	ldrh	r3, [r7, #26]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d147      	bne.n	8002ac0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	7812      	ldrb	r2, [r2, #0]
 8002a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a56:	e033      	b.n	8002ac0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d113      	bne.n	8002a8e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a8c:	e018      	b.n	8002ac0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a8e:	f7fe fd71 	bl	8001574 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d803      	bhi.n	8002aa6 <HAL_SPI_Transmit+0x20a>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d102      	bne.n	8002aac <HAL_SPI_Transmit+0x210>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e02d      	b.n	8002b1c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1c6      	bne.n	8002a58 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f9fe 	bl	8002ed0 <SPI_EndRxTxTransaction>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e097      	b.n	8002c72 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_SPI_Transmit_DMA+0x2a>
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e08f      	b.n	8002c72 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_SPI_Transmit_DMA+0x3c>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e088      	b.n	8002c72 <HAL_SPI_Transmit_DMA+0x14e>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bae:	d10f      	bne.n	8002bd0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd4:	4a29      	ldr	r2, [pc, #164]	@ (8002c7c <HAL_SPI_Transmit_DMA+0x158>)
 8002bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bdc:	4a28      	ldr	r2, [pc, #160]	@ (8002c80 <HAL_SPI_Transmit_DMA+0x15c>)
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	4a27      	ldr	r2, [pc, #156]	@ (8002c84 <HAL_SPI_Transmit_DMA+0x160>)
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c08:	f7fe fe4a 	bl	80018a0 <HAL_DMA_Start_IT>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e023      	b.n	8002c72 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c34:	2b40      	cmp	r3, #64	@ 0x40
 8002c36:	d007      	beq.n	8002c48 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0220 	orr.w	r2, r2, #32
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0202 	orr.w	r2, r2, #2
 8002c6e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	08002d65 	.word	0x08002d65
 8002c80:	08002cbf 	.word	0x08002cbf
 8002c84:	08002d81 	.word	0x08002d81

08002c88 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ccc:	f7fe fc52 	bl	8001574 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d03b      	beq.n	8002d58 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0220 	bic.w	r2, r2, #32
 8002cee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0202 	bic.w	r2, r2, #2
 8002cfe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	2164      	movs	r1, #100	@ 0x64
 8002d04:	6978      	ldr	r0, [r7, #20]
 8002d06:	f000 f8e3 	bl	8002ed0 <SPI_EndRxTxTransaction>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d50:	6978      	ldr	r0, [r7, #20]
 8002d52:	f7ff ffab 	bl	8002cac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d56:	e002      	b.n	8002d5e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002d58:	6978      	ldr	r0, [r7, #20]
 8002d5a:	f7ff ff95 	bl	8002c88 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff ff91 	bl	8002c9a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0203 	bic.w	r2, r2, #3
 8002d9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7ff ff7a 	bl	8002cac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dd0:	f7fe fbd0 	bl	8001574 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002de0:	f7fe fbc8 	bl	8001574 <HAL_GetTick>
 8002de4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002de6:	4b39      	ldr	r3, [pc, #228]	@ (8002ecc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	015b      	lsls	r3, r3, #5
 8002dec:	0d1b      	lsrs	r3, r3, #20
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002df6:	e054      	b.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d050      	beq.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e00:	f7fe fbb8 	bl	8001574 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d902      	bls.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d13d      	bne.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e2e:	d111      	bne.n	8002e54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e38:	d004      	beq.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e42:	d107      	bne.n	8002e54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5c:	d10f      	bne.n	8002e7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e017      	b.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	bf0c      	ite	eq
 8002eb2:	2301      	moveq	r3, #1
 8002eb4:	2300      	movne	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d19b      	bne.n	8002df8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000010 	.word	0x20000010

08002ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff ff6a 	bl	8002dc0 <SPI_WaitFlagStateUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e013      	b.n	8002f2a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ff57 	bl	8002dc0 <SPI_WaitFlagStateUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e000      	b.n	8002f2a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e042      	b.n	8002fca <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d106      	bne.n	8002f5e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7fe fa0b 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2224      	movs	r2, #36	@ 0x24
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f74:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f82c 	bl	8002fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f8a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f9a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002faa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800300e:	f023 030c 	bic.w	r3, r3, #12
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	430b      	orrs	r3, r1
 800301a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2c      	ldr	r2, [pc, #176]	@ (80030e8 <UART_SetConfig+0x114>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d103      	bne.n	8003044 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800303c:	f7ff fb78 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	e002      	b.n	800304a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003044:	f7ff fb60 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003048:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	4a22      	ldr	r2, [pc, #136]	@ (80030ec <UART_SetConfig+0x118>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	0119      	lsls	r1, r3, #4
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009a      	lsls	r2, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003080:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <UART_SetConfig+0x118>)
 8003082:	fba3 0302 	umull	r0, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2064      	movs	r0, #100	@ 0x64
 800308a:	fb00 f303 	mul.w	r3, r0, r3
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	3332      	adds	r3, #50	@ 0x32
 8003094:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <UART_SetConfig+0x118>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a0:	4419      	add	r1, r3
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009a      	lsls	r2, r3, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <UART_SetConfig+0x118>)
 80030ba:	fba3 0302 	umull	r0, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2064      	movs	r0, #100	@ 0x64
 80030c2:	fb00 f303 	mul.w	r3, r0, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	3332      	adds	r3, #50	@ 0x32
 80030cc:	4a07      	ldr	r2, [pc, #28]	@ (80030ec <UART_SetConfig+0x118>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	440a      	add	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40013800 	.word	0x40013800
 80030ec:	51eb851f 	.word	0x51eb851f

080030f0 <memset>:
 80030f0:	4603      	mov	r3, r0
 80030f2:	4402      	add	r2, r0
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d100      	bne.n	80030fa <memset+0xa>
 80030f8:	4770      	bx	lr
 80030fa:	f803 1b01 	strb.w	r1, [r3], #1
 80030fe:	e7f9      	b.n	80030f4 <memset+0x4>

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	2600      	movs	r6, #0
 8003104:	4d0c      	ldr	r5, [pc, #48]	@ (8003138 <__libc_init_array+0x38>)
 8003106:	4c0d      	ldr	r4, [pc, #52]	@ (800313c <__libc_init_array+0x3c>)
 8003108:	1b64      	subs	r4, r4, r5
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	f000 f828 	bl	8003164 <_init>
 8003114:	2600      	movs	r6, #0
 8003116:	4d0a      	ldr	r5, [pc, #40]	@ (8003140 <__libc_init_array+0x40>)
 8003118:	4c0a      	ldr	r4, [pc, #40]	@ (8003144 <__libc_init_array+0x44>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f855 3b04 	ldr.w	r3, [r5], #4
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	0800464c 	.word	0x0800464c
 800313c:	0800464c 	.word	0x0800464c
 8003140:	0800464c 	.word	0x0800464c
 8003144:	08004650 	.word	0x08004650

08003148 <memcpy>:
 8003148:	440a      	add	r2, r1
 800314a:	4291      	cmp	r1, r2
 800314c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003150:	d100      	bne.n	8003154 <memcpy+0xc>
 8003152:	4770      	bx	lr
 8003154:	b510      	push	{r4, lr}
 8003156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800315a:	4291      	cmp	r1, r2
 800315c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003160:	d1f9      	bne.n	8003156 <memcpy+0xe>
 8003162:	bd10      	pop	{r4, pc}

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
